/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RatingImport } from './routes/rating'
import { Route as PlayImport } from './routes/play'
import { Route as InfoImport } from './routes/info'
import { Route as FinishImport } from './routes/finish'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const RatingRoute = RatingImport.update({
  id: '/rating',
  path: '/rating',
  getParentRoute: () => rootRoute,
} as any)

const PlayRoute = PlayImport.update({
  id: '/play',
  path: '/play',
  getParentRoute: () => rootRoute,
} as any)

const InfoRoute = InfoImport.update({
  id: '/info',
  path: '/info',
  getParentRoute: () => rootRoute,
} as any)

const FinishRoute = FinishImport.update({
  id: '/finish',
  path: '/finish',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/finish': {
      id: '/finish'
      path: '/finish'
      fullPath: '/finish'
      preLoaderRoute: typeof FinishImport
      parentRoute: typeof rootRoute
    }
    '/info': {
      id: '/info'
      path: '/info'
      fullPath: '/info'
      preLoaderRoute: typeof InfoImport
      parentRoute: typeof rootRoute
    }
    '/play': {
      id: '/play'
      path: '/play'
      fullPath: '/play'
      preLoaderRoute: typeof PlayImport
      parentRoute: typeof rootRoute
    }
    '/rating': {
      id: '/rating'
      path: '/rating'
      fullPath: '/rating'
      preLoaderRoute: typeof RatingImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/finish': typeof FinishRoute
  '/info': typeof InfoRoute
  '/play': typeof PlayRoute
  '/rating': typeof RatingRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/finish': typeof FinishRoute
  '/info': typeof InfoRoute
  '/play': typeof PlayRoute
  '/rating': typeof RatingRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/finish': typeof FinishRoute
  '/info': typeof InfoRoute
  '/play': typeof PlayRoute
  '/rating': typeof RatingRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/finish' | '/info' | '/play' | '/rating'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/finish' | '/info' | '/play' | '/rating'
  id: '__root__' | '/' | '/finish' | '/info' | '/play' | '/rating'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FinishRoute: typeof FinishRoute
  InfoRoute: typeof InfoRoute
  PlayRoute: typeof PlayRoute
  RatingRoute: typeof RatingRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FinishRoute: FinishRoute,
  InfoRoute: InfoRoute,
  PlayRoute: PlayRoute,
  RatingRoute: RatingRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/finish",
        "/info",
        "/play",
        "/rating"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/finish": {
      "filePath": "finish.tsx"
    },
    "/info": {
      "filePath": "info.tsx"
    },
    "/play": {
      "filePath": "play.tsx"
    },
    "/rating": {
      "filePath": "rating.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
